package main

import (
	"fmt"
	"time"
)

// Самая распространённая проблема в Go. Итерационные переменные в выражении for снова используются для каждой итерации.
// Это значит, что каждое замыкание (aka функциональный литерал), созданное в вашем цикле for,
// будет ссылаться на ту же переменную (и они получат значение переменной в тот момент, когда начнётся исполнение их горутин).
func main() {
	sl := []string{"one", "two", "three"}

	for _, v := range sl {
		// Простейшее решение (не требующее менять горутины): сохранить текущее значение итерационной переменной в локальной переменной внутри блока цикла for.
		vCopy := v
		go func() {
			fmt.Println(vCopy)
		}()
	}

	time.Sleep(5 * time.Second)
}
